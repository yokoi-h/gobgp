// Code generated by protoc-gen-go.
// source: sample.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	Request
	Error
	Count
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Request struct {
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Error struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto1.CompactTextString(m) }
func (*Error) ProtoMessage()    {}

type Count struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto1.CompactTextString(m) }
func (*Count) ProtoMessage()    {}

func init() {
}

// Client API for CountService service

type CountServiceClient interface {
	MonitorCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (CountService_MonitorCountClient, error)
	AddCount(ctx context.Context, in *Count, opts ...grpc.CallOption) (*Error, error)
}

type countServiceClient struct {
	cc *grpc.ClientConn
}

func NewCountServiceClient(cc *grpc.ClientConn) CountServiceClient {
	return &countServiceClient{cc}
}

func (c *countServiceClient) MonitorCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (CountService_MonitorCountClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CountService_serviceDesc.Streams[0], c.cc, "/proto.CountService/MonitorCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &countServiceMonitorCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CountService_MonitorCountClient interface {
	Recv() (*Count, error)
	grpc.ClientStream
}

type countServiceMonitorCountClient struct {
	grpc.ClientStream
}

func (x *countServiceMonitorCountClient) Recv() (*Count, error) {
	m := new(Count)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countServiceClient) AddCount(ctx context.Context, in *Count, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/proto.CountService/AddCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CountService service

type CountServiceServer interface {
	MonitorCount(*Request, CountService_MonitorCountServer) error
	AddCount(context.Context, *Count) (*Error, error)
}

func RegisterCountServiceServer(s *grpc.Server, srv CountServiceServer) {
	s.RegisterService(&_CountService_serviceDesc, srv)
}

func _CountService_MonitorCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountServiceServer).MonitorCount(m, &countServiceMonitorCountServer{stream})
}

type CountService_MonitorCountServer interface {
	Send(*Count) error
	grpc.ServerStream
}

type countServiceMonitorCountServer struct {
	grpc.ServerStream
}

func (x *countServiceMonitorCountServer) Send(m *Count) error {
	return x.ServerStream.SendMsg(m)
}

func _CountService_AddCount_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Count)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(CountServiceServer).AddCount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CountService",
	HandlerType: (*CountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCount",
			Handler:    _CountService_AddCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorCount",
			Handler:       _CountService_MonitorCount_Handler,
			ServerStreams: true,
		},
	},
}
