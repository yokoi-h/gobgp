# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sample.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sample.proto',
  package='proto',
  syntax='proto3',
  serialized_pb=_b('\n\x0csample.proto\x12\x05proto\"\t\n\x07Request\"\x15\n\x05\x45rror\x12\x0c\n\x04\x63ode\x18\x01 \x01(\x05\"\x17\n\x05\x43ount\x12\x0e\n\x06number\x18\x01 \x01(\x05\x32j\n\x0c\x43ountService\x12\x30\n\x0cMonitorCount\x12\x0e.proto.Request\x1a\x0c.proto.Count\"\x00\x30\x01\x12(\n\x08\x41\x64\x64\x43ount\x12\x0c.proto.Count\x1a\x0c.proto.Error\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='proto.Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=23,
  serialized_end=32,
)


_ERROR = _descriptor.Descriptor(
  name='Error',
  full_name='proto.Error',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='proto.Error.code', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=34,
  serialized_end=55,
)


_COUNT = _descriptor.Descriptor(
  name='Count',
  full_name='proto.Count',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='number', full_name='proto.Count.number', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=57,
  serialized_end=80,
)

DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['Error'] = _ERROR
DESCRIPTOR.message_types_by_name['Count'] = _COUNT

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), dict(
  DESCRIPTOR = _REQUEST,
  __module__ = 'sample_pb2'
  # @@protoc_insertion_point(class_scope:proto.Request)
  ))
_sym_db.RegisterMessage(Request)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), dict(
  DESCRIPTOR = _ERROR,
  __module__ = 'sample_pb2'
  # @@protoc_insertion_point(class_scope:proto.Error)
  ))
_sym_db.RegisterMessage(Error)

Count = _reflection.GeneratedProtocolMessageType('Count', (_message.Message,), dict(
  DESCRIPTOR = _COUNT,
  __module__ = 'sample_pb2'
  # @@protoc_insertion_point(class_scope:proto.Count)
  ))
_sym_db.RegisterMessage(Count)


import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterCountServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def MonitorCount(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def AddCount(self, request, context):
    raise NotImplementedError()
class EarlyAdopterCountServiceServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterCountServiceStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def MonitorCount(self, request):
    raise NotImplementedError()
  MonitorCount.async = None
  @abc.abstractmethod
  def AddCount(self, request):
    raise NotImplementedError()
  AddCount.async = None
def early_adopter_create_CountService_server(servicer, port, private_key=None, certificate_chain=None):
  import sample_pb2
  import sample_pb2
  import sample_pb2
  import sample_pb2
  method_service_descriptions = {
    "AddCount": utilities.unary_unary_service_description(
      servicer.AddCount,
      sample_pb2.Count.FromString,
      sample_pb2.Error.SerializeToString,
    ),
    "MonitorCount": utilities.unary_stream_service_description(
      servicer.MonitorCount,
      sample_pb2.Request.FromString,
      sample_pb2.Count.SerializeToString,
    ),
  }
  return implementations.server("proto.CountService", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_CountService_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import sample_pb2
  import sample_pb2
  import sample_pb2
  import sample_pb2
  method_invocation_descriptions = {
    "AddCount": utilities.unary_unary_invocation_description(
      sample_pb2.Count.SerializeToString,
      sample_pb2.Error.FromString,
    ),
    "MonitorCount": utilities.unary_stream_invocation_description(
      sample_pb2.Request.SerializeToString,
      sample_pb2.Count.FromString,
    ),
  }
  return implementations.stub("proto.CountService", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
