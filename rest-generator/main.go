package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strings"
	"text/template"
)

type RestApi struct {
	URL      string
	FuncName string
	Method   string
}

var (
	generatedTemplate = template.Must(template.New("gobgp-rest").Parse(
		`// generated by rest-generator -- DO NOT EDIT
package api

import (
	"github.com/gorilla/mux"
)

func (rs *RestServer) createRouter() *mux.Router {
  r := mux.NewRouter()

  {{range .APIs}}r.HandleFunc("{{.URL}}", rs.{{.FuncName}}).Methods("{{.Method}}")
  {{end}}
  return r
}

`))
)

func main() {

	src := os.Args[1]
	output := os.Args[2]

	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, src, nil, parser.ParseComments)
	if err != nil {
		fmt.Println(err)
		return
	}

	apis := make([]RestApi, 0)

	for _, decl := range f.Decls {
		ast.Inspect(decl, func(node ast.Node) bool {

			fn, ok := node.(*ast.FuncDecl)
			if !ok {
				return false
			}
			fnName := fn.Name.Name

			if fn.Doc != nil {

				for _, txt := range fn.Doc.List {

					cmt := txt.Text
					if strings.Contains(cmt, "@rest:") {
						// parse comment like '@rest:/v1/bgp/neighbors'
						s := strings.Split(cmt, ":")
						url := s[1]

						// detect HTTP method from the function name.
						method := "GET"
						if strings.HasPrefix(fnName, "post") {
							method = "POST"
						} else if strings.HasPrefix(fnName, "put") {
							method = "PUT"
						} else if strings.HasPrefix(fnName, "delete") {
							method = "DELETE"
						}

						api := RestApi{URL: url, FuncName: fnName, Method: method}
						apis = append(apis, api)
						break
					}

				}
			}

			return false
		})
	}

	t := struct{ APIs []RestApi }{
		APIs: apis,
	}

	if len(apis) > 0 {
		w, _ := os.Create(output)
		defer w.Close()
		generatedTemplate.Execute(w, t)
	}

}
